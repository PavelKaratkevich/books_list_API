// Code generated by MockGen. DO NOT EDIT.
// Source: books-list/domain (interfaces: BookRepository)

// Package domain is a generated GoMock package.
package domain

import (
	domain "books-list/domain"
	err "books-list/err"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookRepository is a mock of BookRepository interface.
type MockBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryMockRecorder
}

// MockBookRepositoryMockRecorder is the mock recorder for MockBookRepository.
type MockBookRepositoryMockRecorder struct {
	mock *MockBookRepository
}

// NewMockBookRepository creates a new mock instance.
func NewMockBookRepository(ctrl *gomock.Controller) *MockBookRepository {
	mock := &MockBookRepository{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepository) EXPECT() *MockBookRepositoryMockRecorder {
	return m.recorder
}

// AddBook mocks base method.
func (m *MockBookRepository) AddBook(arg0 domain.Book) (int, *err.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBook", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*err.Error)
	return ret0, ret1
}

// AddBook indicates an expected call of AddBook.
func (mr *MockBookRepositoryMockRecorder) AddBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBook", reflect.TypeOf((*MockBookRepository)(nil).AddBook), arg0)
}

// GetBook mocks base method.
func (m *MockBookRepository) GetBook(arg0 int) (*domain.Book, *err.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", arg0)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(*err.Error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookRepositoryMockRecorder) GetBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookRepository)(nil).GetBook), arg0)
}

// GetBooks mocks base method.
func (m *MockBookRepository) GetBooks() ([]domain.Book, *err.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks")
	ret0, _ := ret[0].([]domain.Book)
	ret1, _ := ret[1].(*err.Error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockBookRepositoryMockRecorder) GetBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockBookRepository)(nil).GetBooks))
}

// RemoveBook mocks base method.
func (m *MockBookRepository) RemoveBook(arg0 int) (int, *err.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBook", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*err.Error)
	return ret0, ret1
}

// RemoveBook indicates an expected call of RemoveBook.
func (mr *MockBookRepositoryMockRecorder) RemoveBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBook", reflect.TypeOf((*MockBookRepository)(nil).RemoveBook), arg0)
}

// UpdateBook mocks base method.
func (m *MockBookRepository) UpdateBook(arg0 domain.Book) (int, *err.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*err.Error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookRepositoryMockRecorder) UpdateBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookRepository)(nil).UpdateBook), arg0)
}
